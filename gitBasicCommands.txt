---BASIC COMMANDS---
git init = initialize project to use git
git add . = add all changes to be saved
git add *filename* = add single file to be saved
git commit -m 'message' = save changes with message
git push origin *branch* = push changes to github branch from HEAD
git pull origin master = pull changes from github branch to HEAD branch
git switch *branch* = switch to branch
git checkout -b *new-branch* = create new branch and switch to it
git status = check status of changes (staged-unstaged changes)
git log = see all previous saved changes

---BEGINNER COMMANDS---
git checkout *commit hash* = travel back to old commit
git checkout = check out if your local branch is synced up with the remote one
git branch = see all branches (an '*' will appear in the currently active branch)
git ls-files = see all the files in the git index (not in working-tree)
git ls-tree --full-tree --name-only main =
	see the files/directories in main branch
git rm --cache *filename* = deletes one file from the git index (not from working-tree)


---USEFUL COMMENTS---
	·What is git?
Git is a program that operates in your comoputer to help you
manage all the changes and different versions of your files.
(You will firstly need to know how git works, so you can
understand how github works on its part).

	·How to start using git?
Let's say you start a new project in a new directory 'my-project'.
If you want to use git for this project, you have to initialize
git inside the 'my-project' folder. This way, everything that you
write will be tracked (and your career as a developer will begin :) ).

	·How to track my progress?
Your folder in this stage will have only the file .git that is created
when you initialize git. Then you make whatever changes you want,
i.e. you create files/folders, make changes, delete stuff etc.
Every time you make changes, they are unstaged, so they are not
in the staging area.
The two fundamental steps you take at this point are:
1) move the changes you make to the staging area (git add),
2) commit the staged changes to your work (git commit).
(You can only include the staged changes to one commit. This is
why the staging area exists. Once you commit the changes,
the staging area will be empty, so that you can stage other changes
to another commit.)

	·What should I track?
Every commit you make is a step of progress of your code. A useful
advice is to not commit changes that do nothing, like if you've only
corrected typos, or canged the name of a variable... you get the
point.

	·What are branches?
Let's say you are in a point that you want to experiment and solve
a subproblem of your project with 2 ways, or even
To have everything tracked, you can create new branches.
Branches are the versions of your code.

Every time you initialize git there is only one branch, the 'master'
branch.  The branch you are currently working in is
called HEAD branch, and every commit you make will be added to
this branch.

	·What is github?
GitHub on the other hand, is a website that you can publish your
projects and view the code that other people write. It is basically
the link between you and your co-workers.
